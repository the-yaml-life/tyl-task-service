name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # Linting and Testing
  # ==========================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      run: cargo test --verbose

    - name: Run doc tests
      run: cargo test --doc

    - name: Generate test coverage
      run: |
        cargo install cargo-tarpaulin || true
        cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.event_name == 'push'
      with:
        file: ./cobertura.xml
        fail_ci_if_error: false

  # ==========================================
  # Security Audit
  # ==========================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit --force

    - name: Run security audit
      run: cargo audit

  # ==========================================
  # Docker Build and Push
  # ==========================================
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  # ==========================================
  # Release Artifacts
  # ==========================================
  release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, security]
    
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}

    - name: Create release archive
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../tyl-task-service-${{ matrix.target }}.tar.gz tyl-task-service
        cd ../../..

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: tyl-task-service-${{ matrix.target }}
        path: tyl-task-service-${{ matrix.target }}.tar.gz

  # ==========================================
  # Docker Artifacts
  # ==========================================
  docker-artifacts:
    name: Generate Docker Artifacts
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Docker artifacts bundle
      run: |
        mkdir -p docker-artifacts
        
        # Copy Docker files
        cp Dockerfile docker-artifacts/
        cp Dockerfile.test docker-artifacts/
        cp docker-compose.yml docker-artifacts/
        cp .dockerignore docker-artifacts/
        
        # Copy configuration
        cp -r config/ docker-artifacts/
        
        # Create deployment README
        cat > docker-artifacts/README.md << 'EOF'
        # TYL Task Service - Docker Deployment

        ## Quick Start

        ```bash
        # Build image
        docker build -t tyl-task-service .

        # Run with Docker Compose
        docker compose up -d

        # Check health
        curl http://localhost:3000/health
        ```

        ## Files

        - `Dockerfile` - Production image
        - `Dockerfile.test` - Test image  
        - `docker-compose.yml` - Complete stack
        - `.dockerignore` - Build optimization
        - `config/` - Configuration files

        ## Environment Variables

        See `.env.example` for configuration options.

        ## Ports

        - 3000: API service
        - 6379: FalkorDB
        - 6380: Redis PubSub
        EOF
        
        # Copy environment example
        cp .env.example docker-artifacts/ || echo "# No .env.example found" > docker-artifacts/.env.example
        
        # Create deployment script
        cat > docker-artifacts/deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "üê≥ Deploying TYL Task Service"
        
        # Build image
        docker build -t tyl-task-service .
        
        # Start services
        docker compose up -d
        
        # Wait for health check
        echo "‚è≥ Waiting for services to be healthy..."
        sleep 10
        
        # Test health
        if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "‚úÖ Service is healthy and ready!"
            echo "üåê API available at: http://localhost:3000"
            echo "üìã Health check: http://localhost:3000/health"
        else
            echo "‚ùå Service health check failed"
            exit 1
        fi
        EOF
        
        chmod +x docker-artifacts/deploy.sh
        
        # Create archive
        tar -czf docker-artifacts.tar.gz docker-artifacts/

    - name: Upload Docker artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-artifacts
        path: docker-artifacts.tar.gz

  # ==========================================
  # GitHub Release
  # ==========================================
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker, release-artifacts, docker-artifacts]
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/tyl-task-service-*/tyl-task-service-*.tar.gz
          artifacts/docker-artifacts/docker-artifacts.tar.gz
          artifacts/sbom/sbom.spdx.json
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================
  # Integration Tests (Optional)
  # ==========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      falkordb:
        image: falkordb/falkordb:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Docker validation script
      run: |
        chmod +x scripts/validate-docker.sh
        # Skip docker-compose parts since we're using GitHub services
        docker build -t tyl-task-service .
        
        # Test basic functionality
        docker run -d --name test-service \
          --network host \
          -e FALKORDB_HOST=localhost \
          -e REDIS_PUBSUB_HOST=localhost \
          tyl-task-service
        
        # Wait for startup
        sleep 15
        
        # Test health endpoints
        curl -f http://localhost:3000/health
        curl -f http://localhost:3000/health/detail
        
        # Cleanup
        docker stop test-service
        docker rm test-service

    - name: Run integration tests
      run: |
        # Set environment for tests
        export FALKORDB_HOST=localhost
        export FALKORDB_PORT=6379
        export REDIS_PUBSUB_HOST=localhost
        export REDIS_PUBSUB_PORT=6380
        
        # Run integration tests
        cargo test --test integration_tests